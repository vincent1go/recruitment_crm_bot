import logging
import asyncio
import os
from aiohttp import web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
import config
from pdf_generator import generate_pdf
import re
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

SELECTING_TEMPLATE = 1
ENTERING_TEXT = 2
EDITING_DATE = 3
MAX_BOOKMARKS = 10
pdf_lock = asyncio.Lock()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if "bookmarks" in context.user_data and len(context.user_data["bookmarks"]) > MAX_BOOKMARKS:
        context.user_data["bookmarks"] = context.user_data["bookmarks"][-MAX_BOOKMARKS:]
    message = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PDF-–±–æ—Ç!*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ PDF-—Ñ–∞–π–ª üìÑ\n"
        "‚ö†Ô∏è –ó–∞–∫–ª–∞–¥–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."
    )
    keyboard = [
        [
            InlineKeyboardButton("üìÑ –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="select_template"),
            InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
        ],
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ", callback_data="show_bookmarks")]
    ]
    await update.message.reply_text(message, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    message = (
        "‚ÑπÔ∏è *–û –±–æ—Ç–µ*\n\n"
        "–ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤.\n"
        "–ê–≤—Ç–æ—Ä: @vincent1go\n"
        "[GitHub](https://github.com/vincent1go/telegram-pdf-bot)"
    )
    keyboard = [[InlineKeyboardButton("üè† –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    await query.message.edit_text(message, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    message = "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = [
        [
            InlineKeyboardButton("üìÑ –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="select_template"),
            InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
        ],
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ", callback_data="show_bookmarks")]
    ]
    await query.message.edit_text(message, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def select_template(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    message = "üìÑ *–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω*:"
    keyboard = []
    for name in config.TEMPLATES.keys():
        keyboard.append([InlineKeyboardButton(name, callback_data=f"template_{name}")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    await query.message.edit_text(message, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    context.user_data["state"] = SELECTING_TEMPLATE

async def template_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    name = query.data.replace("template_", "")
    if name not in config.TEMPLATES:
        await query.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    context.user_data["template"] = name
    context.user_data["state"] = ENTERING_TEXT
    await query.message.edit_text(
        f"‚úÖ –®–∞–±–ª–æ–Ω –≤—ã–±—Ä–∞–Ω: *{name}*\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data="select_template")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        ])
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    await query.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode="Markdown", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÑ –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="select_template")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")],
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ", callback_data="show_bookmarks")]
    ]))

async def receive_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if "template" not in context.user_data:
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        await update.message.reply_text(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    if context.user_data.get("state") == EDITING_DATE:
        await receive_new_date(update, context)
        return

    client_name = update.message.text.strip()
    if len(client_name) > 50:
        await update.message.reply_text("‚ö†Ô∏è –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    template_name = context.user_data["template"]
    async with pdf_lock:
        try:
            template_path = config.TEMPLATES[template_name]
            pdf_path = generate_pdf(template_path, client_name)
            filename = f"{client_name}.pdf"
            with open(pdf_path, "rb") as f:
                await update.message.reply_document(document=f, filename=filename)

            context.user_data["last_document"] = {
                "client_name": client_name,
                "template": template_name,
                "date": datetime.now().strftime("%d.%m.%Y")
            }

            keyboard = [
                [
                    InlineKeyboardButton("üìå –í –∑–∞–∫–ª–∞–¥–∫–∏", callback_data="add_bookmark"),
                    InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data="edit_date"),
                ],
                [
                    InlineKeyboardButton("üìÑ –ö —à–∞–±–ª–æ–Ω–∞–º", callback_data="select_template"),
                    InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ", callback_data="show_bookmarks"),
                ],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            await update.message.reply_text(
                "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω!\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

            try:
                os.remove(pdf_path)
            except OSError:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {pdf_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF.")

async def add_bookmark(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if "last_document" not in context.user_data:
        await query.message.edit_text("‚ö†Ô∏è –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–∫–ª–∞–¥–∫–∏.")
        return

    if "bookmarks" not in context.user_data:
        context.user_data["bookmarks"] = []

    if len(context.user_data["bookmarks"]) >= MAX_BOOKMARKS:
        await query.message.edit_text(
            f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–∫–ª–∞–¥–æ–∫ ({MAX_BOOKMARKS}).",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        )
        return

    document = context.user_data["last_document"]
    context.user_data["bookmarks"].append(document)
    await query.message.edit_text(
        f"üìå –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è *{document['client_name']}* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–ª–∞–¥–∫–∏!",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ", callback_data="show_bookmarks")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

async def show_bookmarks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if "bookmarks" not in context.user_data or not context.user_data["bookmarks"]:
        await query.message.edit_text(
            "üíæ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        )
        return

    message = "üíæ *–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã*:\n\n"
    keyboard = []
    for i, doc in enumerate(context.user_data["bookmarks"]):
        message += f"{i + 1}. {doc['client_name']} ({doc['template']}, {doc['date']})\n"
        keyboard.append([InlineKeyboardButton(
            f"{doc['client_name']} ({doc['date']})",
            callback_data=f"generate_bookmark_{i}"
        )])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    await query.message.edit_text(message, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def generate_bookmark(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    index = int(query.data.replace("generate_bookmark_", ""))
    if "bookmarks" not in context.user_data or index >= len(context.user_data["bookmarks"]):
        await query.message.edit_text("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    doc = context.user_data["bookmarks"][index]
    client_name = doc["client_name"]
    template_name = doc["template"]
    date = doc["date"]

    async with pdf_lock:
        try:
            template_path = config.TEMPLATES[template_name]
            pdf_path = generate_pdf(template_path, client_name, custom_date=date)
            filename = f"{client_name}.pdf"
            with open(pdf_path, "rb") as f:
                await query.message.reply_document(document=f, filename=filename)

            context.user_data["last_document"] = doc
            keyboard = [
                [
                    InlineKeyboardButton("üìå –í –∑–∞–∫–ª–∞–¥–∫–∏", callback_data="add_bookmark"),
                    InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data="edit_date"),
                ],
                [
                    InlineKeyboardButton("üìÑ –ö —à–∞–±–ª–æ–Ω–∞–º", callback_data="select_template"),
                    InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ", callback_data="show_bookmarks"),
                ],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            await query.message.edit_text(
                "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω!\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

            try:
                os.remove(pdf_path)
            except OSError:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {pdf_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –∏–∑ –∑–∞–∫–ª–∞–¥–∫–∏: {e}")
            await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF.")

async def request_new_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É'")
    if "last_document" not in context.user_data:
        await query.message.edit_text("‚ö†Ô∏è –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã.")
        return

    context.user_data["state"] = EDITING_DATE
    await query.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä, 24.04.2025):",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
    )

async def validate_date(date_str: str) -> bool:
    pattern = r"^\d{2}\.\d{2}\.\d{4}$"
    if not re.match(pattern, date_str):
        return False
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except ValueError:
        return False

async def receive_new_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É.")
        return

    new_date = update.message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –¥–∞—Ç–∞: {new_date}")
    if not validate_date(new_date):
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä, 24.04.2025):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]])
        )
        return

    document = context.user_data["last_document"]
    client_name = document["client_name"]
    template_name = document["template"]

    async with pdf_lock:
        try:
            template_path = config.TEMPLATES[template_name]
            pdf_path = generate_pdf(template_path, client_name, custom_date=new_date)
            filename = f"{client_name}.pdf"
            with open(pdf_path, "rb") as f:
                await update.message.reply_document(document=f, filename=filename)

            context.user_data["last_document"]["date"] = new_date
            keyboard = [
                [
                    InlineKeyboardButton("üìå –í –∑–∞–∫–ª–∞–¥–∫–∏", callback_data="add_bookmark"),
                    InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data="edit_date"),
                ],
                [
                    InlineKeyboardButton("üìÑ –ö —à–∞–±–ª–æ–Ω–∞–º", callback_data="select_template"),
                    InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ", callback_data="show_bookmarks"),
                ],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            await update.message.reply_text(
                "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω!\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            context.user_data["state"] = ENTERING_TEXT

            try:
                os.remove(pdf_path)
            except OSError:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {pdf_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF —Å –Ω–æ–≤–æ–π –¥–∞—Ç–æ–π: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF.")

async def check_webhook(context: ContextTypes.DEFAULT_TYPE):
    try:
        webhook_info = await context.bot.get_webhook_info()
        if webhook_info.url != config.WEBHOOK_URL:
            logger.warning("–í–µ–±—Ö—É–∫ —Å–±—Ä–æ—à–µ–Ω, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
            await context.bot.set_webhook(url=config.WEBHOOK_URL)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

async def handle_webhook(request):
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        if not update:
            logger.error("–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram")
            return web.Response(status=400, text="invalid update")
        await application.process_update(update)
        return web.Response(text="ok")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        return web.Response(status=500, text="error")

async def home(request):
    return web.Response(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def main():
    global application
    application = Application.builder().token(config.BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(select_template, pattern="select_template"))
    application.add_handler(CallbackQueryHandler(main_menu, pattern="main_menu"))
    application.add_handler(CallbackQueryHandler(about, pattern="about"))
    application.add_handler(CallbackQueryHandler(cancel, pattern="cancel"))
    application.add_handler(CallbackQueryHandler(template_selected, pattern="template_.*"))
    application.add_handler(CallbackQueryHandler(add_bookmark, pattern="add_bookmark"))
    application.add_handler(CallbackQueryHandler(show_bookmarks, pattern="show_bookmarks"))
    application.add_handler(CallbackQueryHandler(generate_bookmark, pattern="generate_bookmark_.*"))
    application.add_handler(CallbackQueryHandler(request_new_date, pattern="edit_date"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_text))

    await application.initialize()
    await application.bot.set_webhook(url=config.WEBHOOK_URL)
    await application.start()
    application.job_queue.run_repeating(check_webhook, interval=600)

    app = web.Application()
    app.router.add_post("/telegram", handle_webhook)
    app.router.add_get("/", home)

    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv("PORT", 8080))
    site = web.TCPSite(runner, "0.0.0.0", port=port)
    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    await site.start()

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
