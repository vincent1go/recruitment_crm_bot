import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from pdf_generator import generate_pdf

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
TEMPLATES = {
    "clean_template": "clean_template_no_text.pdf",
    "small_world": "template_small_world.pdf",
    "imperative": "template_imperative.pdf"
}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω üìÑ", callback_data="select_template")],
        [InlineKeyboardButton("–û –±–æ—Ç–µ ‚ÑπÔ∏è", callback_data="about")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "select_template":
        keyboard = [
            [InlineKeyboardButton("Clean Template", callback_data="template_clean_template")],
            [InlineKeyboardButton("Small World", callback_data="template_small_world")],
            [InlineKeyboardButton("Imperative", callback_data="template_imperative")],
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", callback_data="start_over")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üìÑ –í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:",
            reply_markup=reply_markup
        )
    elif query.data == "about":
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="start_over")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚ÑπÔ∏è –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF-–¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤.\n"
            "–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω, —É–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ, –∏ —è —Å–æ–∑–¥–∞–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ–±—è! üöÄ",
            reply_markup=reply_markup
        )
    elif query.data == "start_over":
        keyboard = [
            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω üìÑ", callback_data="select_template")],
            [InlineKeyboardButton("–û –±–æ—Ç–µ ‚ÑπÔ∏è", callback_data="about")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è",
            reply_markup=reply_markup
        )
    elif query.data.startswith("template_"):
        template_key = query.data.split("template_")[1]
        context.user_data["selected_template"] = template_key
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="select_template")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üìÑ –í—ã –≤—ã–±—Ä–∞–ª–∏ —à–∞–±–ª–æ–Ω: {template_key.replace('_', ' ').title()}.\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, John Doe):",
            reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–∏–º—è –∫–ª–∏–µ–Ω—Ç–∞)
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "selected_template" not in context.user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return

    template_key = context.user_data["selected_template"]
    client_name = update.message.text.strip()
    
    try:
        template_path = TEMPLATES[template_key]
        pdf_path = generate_pdf(template_path, client_name)
        with open(pdf_path, "rb") as pdf_file:
            await update.message.reply_document(document=pdf_file, filename=f"{client_name}.pdf")
        os.remove(pdf_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        await update.message.reply_text("‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {str(e)}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
async def webhook_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return "Bot is running"

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.Text & ~filters.Command, handle_text))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    port = int(os.getenv("PORT", 8080))
    application.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path="/telegram",
        webhook_url=f"https://telegram-pdf-bot-zu70.onrender.com/telegram"
    )
    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

if __name__ == "__main__":
    main()
